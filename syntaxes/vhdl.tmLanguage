<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>VHDL Bundle by Brian Padalino (ocnqnyvab@tznvy.pbz)</string>
	<key>fileTypes</key>
	<array>
		<string>vhd</string>
		<string>vhdl</string>
		<string>vho</string>
	</array>
	<key>foldingStartMarker</key>
	<string>(?x)
		# From the start of the line make sure we are not going into a comment ...
		^(
			([^-]-?(?!-))*?
				(
				# Check for "keyword ... is"
				 (\b(?i:architecture|case|entity|function|package|procedure)\b(.+?)(?i:\bis)\b)
				# Check for if statements
				|(\b(?i:if)\b(.+?)(?i:generate|then)\b)
				# Check for and while statements
				|(\b(?i:for|while)(.+?)(?i:loop|generate)\b)
				# Check for keywords that do not require an is after it
				|(\b(?i:component|process|record)\b[^;]*?$)
				# From the beginning of the line, check for instantiation maps
				|(^\s*\b(?i:port|generic)\b(?i:\s+map\b)?\s*\()
			)
		)
	</string>
	<key>foldingStopMarker</key>
	<string>(?x)
		# From the start of the line ...
		^(
			(
				(
					# Make sure we are not going into a comment ...
					([^-]-?(?!-))*?
						(
							# The word end to the end of the line
			 				(?i:\bend\b).*$\n?
						)
					)
				)
				# ... a close paren followed by an optional semicolon as the only thing on the line
			    |(\s*?\)\s*?;?\s*?$\n?
			)
		)
	</string>
	<key>keyEquivalent</key>
	<string>^~V</string>
	<key>name</key>
	<string>VHDL</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#block_processing</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#cleanup</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>architecture_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# The word architecture $1
						\b((?i:architecture))\s+
						
						# Followed up by a valid $3 or invalid identifier $4
						(([a-zA-z][a-zA-z0-9_]*)|(.+))(?=\s)\s+
						# The word of $5
						((?i:of))\s+
						# Followed by a valid $7 or invalid identifier $8
						(([a-zA-Z][a-zA-Z0-9_]*)|(.+?))(?=\s*(?i:is))\b
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.architecture.begin.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.entity.reference.vhdl</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
						# The word end $1
						\b((?i:end))
						# Optional word architecture $3
						(\s+((?i:architecture)))?
						# Optional same identifier $6 or illegal identifier $7
						(\s+((\3)|(.+?)))?
						# This will cause the previous to capture until just before the ; or $
						(?=\s*;)
					</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.architecture.end.vhdl</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.mismatched.identifier.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.architecture</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function_definition_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#procedure_definition_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#component_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#if_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#process_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#record_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#for_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#entity_instantiation_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#component_instantiation_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>attribute_list</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\'\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.attribute_list</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parenthetical_list</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>block_processing</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#package_pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#package_body_pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#entity_pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#architecture_pattern</string>
				</dict>
			</array>
		</dict>
		<key>case_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# Beginning of line ...
						^\s*
						# Optional identifier ... $3 or invalid identifier $4
						(
							(
								 ([a-zA-Z][a-zA-Z0-9_]*)
								|(.+?)
							)
							\s*:\s*
						)?
						# The word case $5
						\b((?i:case))\b
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.case.begin.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
						# The word end $1
						\b((?i:end))\s*
						# The word case $4 or invalid word $5
						(\s+(((?i:case))|(.*?)))
						# Optional identifier from before $8 or illegal $9
						(\s+((\2)|(.*?)))?
						# Ending with a semicolon
						(?=\s*;)
					</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.case.required.vhdl</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.case.end.vhdl</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.mismatched.identifier.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.case.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#control_patterns</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>cleanup</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constants_numeric</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#attribute_list</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#syntax_highlighting</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>--.*$\n?</string>
					<key>name</key>
					<string>comment.line.double-dash.vhdl</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.c-style.vhdl</string>
				</dict>
			</array>
		</dict>
		<key>component_instantiation_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# From the beginning of the line ...
						^\s*
						# Match a valid identifier $1
						([a-zA-Z][a-zA-Z0-9_]*)
						# Colon! $2
						\s*(:)\s*
						# Another valid identifier $3
						([a-zA-Z][a-zA-Z0-9_]*)\b
						# Make sure we are just the other word, or the beginning of
						# a generic or port mapping
						(?=\s*($|generic|port))
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.section.component_instantiation.vhdl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.component.reference.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.component_instantiation.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parenthetical_list</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>component_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# From the beginning of the line ...
						^\s*
						# The word component $1
						\b((?i:component))\s+
						# A valid identifier $3 or invalid identifier $4
						(([a-zA-Z_][a-zA-Z0-9_]*)\s*|(.+?))(?=\b(?i:is|port)\b|$|--)
						# Optional word is $6
						(\b((?i:is\b)))?
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.component.begin.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
						# The word end $1
						\b((?i:end))\s+
						# The word component $3 or illegal word $4
						(((?i:component\b))|(.+?))(?=\s*|;)
						
						# Optional identifier $7 or illegal mismatched $8
						(\s+((\3)|(.+?)))?(?=\s*;)
					</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.component.keyword.required.vhdl</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.component.end.vhdl</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.mismatched.identifier.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.component.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#generic_list_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#port_list_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>constants_numeric</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b([+\-]?[\d_]+\.[\d_]+([eE][+\-]?[\d_]+)?)\b</string>
					<key>name</key>
					<string>constant.numeric.floating_point.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b\d+#[\h_]+#\b</string>
					<key>name</key>
					<string>constant.numeric.base_pound_number_pound.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b[\d_]+([eE][\d_]+)?\b</string>
					<key>name</key>
					<string>constant.numeric.integer.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[xX]"[0-9a-fA-F_uUxXzZwWlLhH\-]+"</string>
					<key>name</key>
					<string>constant.numeric.quoted.double.string.hex.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[oO]"[0-7_uUxXzZwWlLhH\-]+"</string>
					<key>name</key>
					<string>constant.numeric.quoted.double.string.octal.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[bB]?"[01_uUxXzZwWlLhH\-]+"</string>
					<key>name</key>
					<string>constant.numeric.quoted.double.string.binary.vhdl</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.quoted.double.string.vhdl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([bBoOxX]".+?")</string>
					<key>name</key>
					<string>constant.numeric.quoted.double.string.illegal.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>'[01uUxXzZwWlLhH\-]'</string>
					<key>name</key>
					<string>constant.numeric.quoted.single.std_logic</string>
				</dict>
			</array>
		</dict>
		<key>control_patterns</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#case_pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#if_pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#for_pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#while_pattern</string>
				</dict>
			</array>
		</dict>
		<key>entity_instantiation_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# From the beginning of the line
						^\s*
						# Component identifier or illegal identifier $1
						([a-zA-Z][a-zA-Z0-9_]*)
						# Colon! $2
						\s*(:)\s*
						# Optional word use $4
						(((?i:use))\s+)?
						# Required word entity $5
						((?i:entity))\s+
						# Optional library unit identifier $8 for invalid identifier $9 followed by a dot $10
						(
							(([a-zA-Z][a-zA-Z0-9_]*)|(.+?))
							(\.)
						)?
						# Entity name reference $12 or illegal identifier $13
						(([a-zA-Z][a-zA-Z0-9_]*)|(.+?))
						# Check to see if we are being followed by either open paren, end of line, or port or generic words
						(?=\s*(\(|$|(?i:port|generic)))
						# Optional architecture elaboration
						(
							# Open paren $16
							\s*(\()\s*
							# Arch identifier $18 or invalid identifier $19
							(([a-zA-Z][a-zA-Z0-9_]*)|(.+?))(?=\s*\))
							# Close paren $21
							\s*(\))
						)?
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.section.entity_instantiation.vhdl</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
						<key>12</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.entity.reference.vhdl</string>
						</dict>
						<key>13</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
						<key>16</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
						<key>18</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.architecture.reference.vhdl</string>
						</dict>
						<key>19</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
						<key>21</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.library.reference.vhdl</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.entity_instantiation.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parenthetical_list</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>entity_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# From the beginning of the line ...
						^\s*
						# The word entity $1
						((?i:entity\b))\s+
						# The identifier $3 or an invalid identifier $4
						(([a-zA-Z][a-zA-Z\d_]*)|(.+?))(?=\s)
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.entity.begin.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
						# The word end $1
						\b((?i:end\b))
						# Optional word entity $3
						(\s+((?i:entity)))?
						# Optional identifier match $6 or indentifier mismatch $7
						(\s+((\3)|(.+?)))?
						
						# Make sure there is a semicolon following
						(?=\s*;)
					</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.entity.end.vhdl</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.mismatched.identifier.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.entity.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#generic_list_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#port_list_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>for_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# From the beginning of the line
						^\s*
						(
							# Check for an identifier $2
							([a-zA-Z][a-zA-Z0-9_]*)
							# Followed by a colon $3
							\s*(:)\s*
						)?
						# Make sure the next word is not wait
						(?!(?i:wait\s*))
						# The for keyword $4
						\b((?i:for))\b
						# Make sure the next word is not all
						(?!\s*(?i:all))
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.for.generate.begin.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
						# The word end $1
						\b((?i:end))\s+
						(
							# Followed by generate or loop $3
							 ((?i:generate|loop))
							# But it really is required $4
							|(\S+)
						)\b
						# The matching identifier $7 or an invalid identifier $8
						(\s+((\2)|(.+?)))?
						# Only space and a semicolon left
						(?=\s*;)
					</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.loop.or.generate.required.vhdl</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.for.generate.end.vhdl</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.mismatched.identifier.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.for.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#control_patterns</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#entity_instantiation_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#component_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#component_instantiation_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#process_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>function_definition_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# From the beginning of the line
						^\s*
						# The word function $1
						((?i:function))\s+
						(
							# A valid normal identifier $3
							 ([a-zA-Z][a-zA-Z\d_]*)
							# A valid string quoted identifier $4
							|("\S+")
							# A valid backslash escaped identifier $5
							|(\\.+\\)
							# An invalid identifier $5
							|(.+?)
						)
						# Check to make sure we have a list or we return
						(?=\s*
							(
								 \(
								|(?i:\breturn\b)
							)
						)
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.function.begin.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.function.begin.vhdl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.function.begin.vhdl</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
						# From the beginning of the line
						^\s*
						# The word end $1
						((?i:end))
						# Optional word function $3
						(\s+((?i:function)))?
						# Optional matched identifier $6 or mismatched identifier $7
						(\s+((\3|\4|\5)|(.+?)))?
						# Ending with whitespace and semicolon
						(?=\s*;)
					</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.function.end.vhdl</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.mismatched.identifier.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.function_definition.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#control_patterns</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#parenthetical_list</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#record_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>function_prototype_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# From the beginning of the line
						^\s*
						# The word function $1
						((?i:function))\s+
						
						(
							# A valid normal identifier $3
							 ([a-zA-Z][a-zA-Z\d_]*)
							# A valid quoted identifier $4
							|("\S+")
							# A valid backslash escaped identifier $5
							|(\\.+\\)
							# An invalid identifier $6
							|(.+?)
						)
						# Check to make sure we have a list or we return
						(?=\s*
							(
								 \(
								|(?i:\breturn\b)
							)
						)
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.function.prototype.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.function.prototype.vhdl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.function.prototype.vhdl</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.function.name.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=;)</string>
					<key>name</key>
					<string>meta.block.function_prototype.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\b(?i:return)(?=\s+[^;]+\s*;)</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>keyword.language.vhdl</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\;</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.terminator.function_prototype.vhdl</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#parenthetical_list</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#cleanup</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#parenthetical_list</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>generic_list_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(?i:generic)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.generic_list.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parenthetical_list</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>if_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						(
							# Optional identifier $2
							([a-zA-Z][a-zA-Z0-9_]*)
							# Followed by a colon $3
							\s*(:)\s*
						)?
						# Keyword if $4
						\b((?i:if))\b
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.if.generate.begin.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
						# The word end $1
						\b((?i:end))\s+
						(
							(
								# Optional generate or if keyword $4
								 ((?i:generate|if))
								# Keyword if or generate required $5
								|(\S+)
							)\b
							(
								\s+
								(
									# Optional matching identifier $8
									 (\2)
									# Mismatched identifier $9
									|(.+?)
								)
							)?
						)?
						# Followed by a semicolon
						(?=\s*;)
					</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.if.or.generate.required.vhdl</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.if.generate.end.vhdl</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.mismatched.identifier.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.if.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#control_patterns</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#process_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#entity_instantiation_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#component_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#component_instantiation_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>'(?i:active|ascending|base|delayed|driving|event|high|image|instance|instance_name|last|last_value|left|leftof|length|low|path|path_name|pos|pred|quiet|range|reverse|reverse_range|right|rightof|simple|simple_name|stable|succ|transaction|val|value)\b</string>
					<key>name</key>
					<string>keyword.attributes.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?i:abs|access|after|alias|all|and|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|mod|nand|new|next|nor|not|null|of|on|open|or|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|rem|report|return|rol|ror|select|severity|shared|signal|sla|sll|sra|srl|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with|xnor|xor)\b</string>
					<key>name</key>
					<string>keyword.language.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\+|\-|&lt;=|=|=&gt;|:=|&gt;=|&gt;|&lt;|/|\||&amp;|(\*{1,2}))</string>
					<key>name</key>
					<string>keyword.operator.vhdl</string>
				</dict>
			</array>
		</dict>
		<key>package_body_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# The word package $1
						\b((?i:package))\s+
						# ... but we want to be a package body $2
						((?i:body))\s+
						# The valid identifier $4 or the invalid one $5
						(([a-zA-Z][a-zA-Z\d_]*)|(.+?))\s+
						# ... and we end it with an is $6
						((?i:is))\b
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.section.package_body.begin.vhdl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
						# The word end $1
						\b((?i:end\b))
						# Optional word package $3 body $4
						(\s+((?i:package))\s+((?i:body)))?
						# Optional identifier $7 or mismatched identifier $8
						(\s+((\4)|(.+?)))?(?=\s*;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.section.package_body.end.vhdl</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.mismatched.identifier.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.package_body.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function_definition_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#procedure_definition_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#subtype_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#record_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>package_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# The word package $1
						\b((?i:package))\s+
						# ... but we do not want to be a package body
						(?!(?i:body))
						# The valid identifier $3 or the invalid one $4
						(([a-zA-Z][a-zA-Z\d_]*)|(.+?))\s+
						# ... and we end it with an is $5
						((?i:is))\b
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.section.package.begin.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
						# The word end $1
						\b((?i:end\b))
						# Optional word package $3
						(\s+((?i:package)))?
						# Optional identifier $6 or mismatched identifier $7
						(\s+((\2)|(.+?)))?(?=\s*;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.section.package.end.vhdl</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.mismatched.identifier.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.package.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function_prototype_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#procedure_prototype_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#subtype_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#record_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#component_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>parenthetical_list</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.block.parenthetical_list.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?=['"a-zA-Z0-9])</string>
							<key>end</key>
							<string>(;|\)|,)</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.item.stopping.character.vhdl</string>
								</dict>
							</dict>
							<key>name</key>
							<string>meta.list.element.vhdl</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#parenthetical_pair</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#cleanup</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>match</key>
							<string>\)</string>
							<key>name</key>
							<string>invalid.illegal.unexpected.parenthesis.vhdl</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>parenthetical_pair</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.parenthetical_pair.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parenthetical_pair</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>port_list_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(?i:port)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.port_list.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parenthetical_list</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>procedure_definition_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# From the beginning of the line
						^\s*
						# The word function $1
						((?i:procedure))\s+
						(
							# A valid normal identifier $3
							 ([a-zA-Z][a-zA-Z\d_]*)
							# A valid quoted identifier $4
							|("\S+")
							# An invalid identifier $5
							|(.+?)
						)
						# Check to make sure we have a list is
						(?=\s*(\(|(?i:is)))
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.procedure.begin.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.procedure.begin.vhdl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
						# From the beginning of the line
						^\s*
						# The word end $1
						((?i:end))
						# Optional word function $3
						(\s+((?i:procedure)))?
						# Optional matched identifier $6 or mismatched identifier $7
						(\s+((\3|\4)|(.+?)))?
						# Ending with whitespace and semicolon
						(?=\s*;)
					</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.procedure.end.vhdl</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.mismatched.identifier.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.procedure_definition.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parenthetical_list</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#control_patterns</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#record_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>procedure_prototype_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						\b((?i:procedure))\s+
						(([a-zA-Z][a-zA-Z0-9_]*)|(.+?))
						(?=\s*(\(|;))
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.procedure.begin.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctual.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.procedure_prototype.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parenthetical_list</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>process_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# From the beginning of the line
						^\s*
						(
							# Optional identifier $2
							([a-zA-Z][a-zA-Z0-9_]*)
							# Colon $3
							\s*(:)\s*
						)?
						# The word process #4
						((?i:process\b))
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.section.process.begin.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
						# The word end $1
						((?i:end))
						# Optional word process $3
						(\s+((?i:process)))
						# Optional identifier $6 or invalid identifier $7
						(\s+((\2)|(.+?)))?
						(?=\s*;)
					</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.section.process.end.vhdl</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.process.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#control_patterns</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>punctuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\.|,|:|;|\(|\))</string>
					<key>name</key>
					<string>punctuation.vhdl</string>
				</dict>
			</array>
		</dict>
		<key>record_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(?i:record)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
						# The word end $1
						\b((?i:end))
						# The word record $2
						\s+((?i:record))
						# Optional identifier $5 or invalid identifier $6
						(\s+(([a-zA-Z][a-zA-Z\d_]*)|(.*?)))?
						# Only whitespace and semicolons can be left
						(?=\s*;)
					</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.record.vhdl</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.record.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#cleanup</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>'.'</string>
					<key>name</key>
					<string>string.quoted.single.vhdl</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>end</key>
					<string>"</string>
					<key>name</key>
					<string>string.quoted.double.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\.</string>
							<key>name</key>
							<string>constant.character.escape.vhdl</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\\</string>
					<key>end</key>
					<string>\\</string>
					<key>name</key>
					<string>string.other.backslash.vhdl</string>
				</dict>
			</array>
		</dict>
		<key>subtype_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# The word subtype $1
						\b((?i:subtype))\s+
						# Valid identifier $3 or invalid identifier $4
						(([a-zA-Z][a-zA-Z0-9_]*)|(.+?))\s+
						# The word is $5
						((?i:is))\b
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.subtype.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.subtype.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>support_constants</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?i:math_1_over_e|math_1_over_pi|math_1_over_sqrt_2|math_2_pi|math_3_pi_over_2|math_deg_to_rad|math_e|math_log10_of_e|math_log2_of_e|math_log_of_10|math_log_of_2|math_pi|math_pi_over_2|math_pi_over_3|math_pi_over_4|math_rad_to_deg|math_sqrt_2|math_sqrt_pi)\b</string>
					<key>name</key>
					<string>support.constant.ieee.math_real.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?i:math_cbase_1|math_cbase_j|math_czero|positive_real|principal_value)\b</string>
					<key>name</key>
					<string>support.constant.ieee.math_complex.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?i:true|false)\b</string>
					<key>name</key>
					<string>support.constant.std.standard.vhdl</string>
				</dict>
			</array>
		</dict>
		<key>support_functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?i:finish|stop|resolution_limit)\b</string>
					<key>name</key>
					<string>support.function.std.env.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?i:readline|read|writeline|write|endfile|endline)\b</string>
					<key>name</key>
					<string>support.function.std.textio.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?i:rising_edge|falling_edge|to_bit|to_bitvector|to_stdulogic|to_stdlogicvector|to_stdulogicvector|is_x)\b</string>
					<key>name</key>
					<string>support.function.ieee.std_logic_1164.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?i:shift_left|shift_right|rotate_left|rotate_right|resize|to_integer|to_unsigned|to_signed)\b</string>
					<key>name</key>
					<string>support.function.ieee.numeric_std.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?i:arccos(h?)|arcsin(h?)|arctan|arctanh|cbrt|ceil|cos|cosh|exp|floor|log10|log2|log|realmax|realmin|round|sign|sin|sinh|sqrt|tan|tanh|trunc)\b</string>
					<key>name</key>
					<string>support.function.ieee.math_real.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?i:arg|cmplx|complex_to_polar|conj|get_principal_value|polar_to_complex)\b</string>
					<key>name</key>
					<string>support.function.ieee.math_complex.vhdl</string>
				</dict>
			</array>
		</dict>
		<key>support_types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?i:boolean|bit|character|severity_level|integer|real|time|delay_length|now|natural|positive|string|bit_vector|file_open_kind|file_open_status|fs|ps|ns|us|ms|sec|min|hr|severity_level|note|warning|error|failure)\b</string>
					<key>name</key>
					<string>support.type.std.standard.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?i:line|text|side|width|input|output)\b</string>
					<key>name</key>
					<string>support.type.std.textio.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?i:std_logic|std_ulogic|std_logic_vector|std_ulogic_vector)\b</string>
					<key>name</key>
					<string>support.type.ieee.std_logic_1164.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?i:signed|unsigned)\b</string>
					<key>name</key>
					<string>support.type.ieee.numeric_std.vhdl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?i:complex|complex_polar)\b</string>
					<key>name</key>
					<string>support.type.ieee.math_complex.vhdl</string>
				</dict>
			</array>
		</dict>
		<key>syntax_highlighting</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support_constants</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support_types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support_functions</string>
				</dict>
			</array>
		</dict>
		<key>type_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# The word type $1
						\b((?i:type))\s+
						# Valid identifier $3 or invalid identifier $4
						(([a-zA-Z][a-zA-Z0-9_]*)|(.+?))
						(
							# A semicolon is coming up if we are incomplete
							 (?=\s*;)
							# Or the word is comes up $7
							|(\s+((?i:is)))
						)\b
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.type.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.invalid.identifier.vhdl</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.type.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#record_pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>while_pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						# From the beginning of the line
						^\s*
						(
							# Check for an identifier $2
							([a-zA-Z][a-zA-Z0-9_]*)
							# Followed by a colon $3
							\s*(:)\s*
						)?
						# The for keyword $4
						\b((?i:while))\b
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string></string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
						# The word end $1
						\b((?i:end))\s+
						(
							# Followed by keyword loop $3
							 ((?i:loop))
							# But it really is required $4
							|(\S+)
						)\b
						# The matching identifier $7 or an invalid identifier $8
						(\s+((\2)|(.+?)))?
						# Only space and a semicolon left
						(?=\s*;)
					</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.language.vhdl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.loop.keyword.required.vhdl</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.while.loop.vhdl</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.mismatched.identifier</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.while.vhdl</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#control_patterns</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#cleanup</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.vhdl</string>
	<key>uuid</key>
	<string>99A3EB51-FCCD-4EA4-A642-10C2E8B93112</string>
</dict>
</plist>